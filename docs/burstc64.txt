? attiny hw z MUX (jak niżej)

? basic wedge https://jimlawless.net/blog/posts/basic-wedge/
? z tokenami https://github.com/barryw/CustomBasicCommands
? DOS5.1 https://www.c64-wiki.com/wiki/DOS_Wedge (+moje FD DD-001)
	? przechwytywanie wektora GONE nie dziala, raczej przejac procedure CHRGET (0473) / CHRGOT (0479) (GET - zwieksza $3b/c, GOT - tylko czyta)
	? raczej tokenizer 0304 (8956)
	? break 8c60 -> odkrycie wbudowanych funkcji
		DIR = C8BC
		DLOAD = C951
		DSAVE = C941

? port-turbo https://plus4world.powweb.com/software/Port-Turbo_V1 - 1541 w/ parallel cable, w/ 8255 lub 6529, no handshake
! transfers with VIA handshake on 1541 side https://github.com/ytmytm/geos/blob/feature-drv1541parallel/drv/drv1541parallel.s
	(nice but no benefit - data comes from drive head, is limited by that)
	
https://coronax.wordpress.com/2013/07/03/retrochallenge-6522-parallel-communications/
When the VIA wants to write to the Arduino, it puts a data byte on the parallel port and then pulses CA2
(the VIA is set to do this automatically whenever the port is read from or written to).
Then, the P:65 waits for a pulse on CA1 which indicates that the Arduino has read the byte.
- init jest 
          lda     #%00001010 <- TU JEST $0A, a u mnie po stronie komputera $0B - rózni się o CA1 edge (tu negative, u mnie positive)
          sta     VIA_PCR    ; set CA2 to pulse mode, CA1 negative edge trigger
          lda     #$19       ; tell the Arduino I want to read a byte
          sta     VIA_DATAA  ; write to port A
          ; wait for arduino to read
@wait:    lda     VIA_IFR    ; busy wait for IFR bit 1 to go high
          and     #$2
          beq     @wait			; TU MAM TAK SAMO

TO TEST:
input latching on CA1 negative edge? zablokuje dane w porcie A
- to się włącza w viabase+11 (ACR) bit 0 (1=latch enabled na PA=CA1)
- tylko wybrać negative edge w viabase+12 (bit 0=0) czyli $0A, a nie $0B


TODO:
! NA SCHEMACIE VIA trzeba zmienić footprint na JP4 (zegar GAL) - ma być 3-2 = Phi0

BUG:
'$' doesn't use current drive number, defaults to 8 (diR U9 works, but $ U9 not)
	drive num in $0277 set in first JSR from $C8BC; maybe just set '$' at $027C + JSR ROM_SETNAM + jump into JSR $FFBD after that?
if there is drive 8, but we do '@9' and then '@' we get endless loop of $40)
ROM load always loads at file-based address (as if ,1 was given)
speeddos loader has the same problem as par1541 - doesn't work with software handshake with VIA
speeddos loader doesn't work with JiffyDOS (ROM differences?)
speeddos loader loses bytes with h/w handshake (wrong setup?) - seems to be the problem on the receiving end

[20250630]
- works (in Yape) with standard JiffyDOS - GCR decoding routines were different
- copied halftrack sequence from SpeedDOS ROM, compared called ROM routines and only F8E0/F8F2 calls were different between SpeedDOS/JiffyDOS/stock rom

[20250629]
- ported SpeedDOS+ PLUS instead, works with PPI/PIO
- on real h/w doesn't work with DolphinDOS (detection fails)
- on real h/w doesn't work with JiffyDOS (patched for RAM track cache) nor JiffyDOS in YaPe - ends with 23 read error 00,17
- software handshake doesn't work with JiffyDOS/stock
- hardware handshake works with stock, but loses bytes in the process ; hardware handshake doesn't work with Jiffy

[20250628]
- tests with parallel 1541: won't start on any ROM (stock/jiffy + w/wo RAM patch, nor DolphinDOS 2) - motor stops as if idling
- more puzzling: only stock DOS is able to load with kernal protocol
  (maybe try speed dos loader? that would also remove the memory issue)

[20250627]
- tcbm2sd, hypaloader - support for drive #9
- 1541 parallel doesn't work on real h/w - drive motor turns off quickly, data doesn't come in; VIA is correctly detected, cable test passed

[20250626]
- corrected dload after dload bug with 1541 parallel loader (mess with same zp locations used for different purposes)
- corrected directory browser load&run feature (overlap of ZP use)

[20250625]
- 1541 parallel loader for PPI/PIO/VIA/CIA; a bit broken (can't load a second file after load) ; based on Port-Turbo_V1
- lots of duplicated code for highram-loader

[20250624]
- detect 1541 + parallel cable and port type (8522 PPI, 6529 PIO, 6522 VIA, 6526 CIA)
- refactor common parts

[20250622]
- directory browser with load&run wedge code moved to tape buffer and without RESTOR call

[20250621]
- /=dload, <-=dsave + użyj tylko nazwy w cudzysłowach, więc '/' na początku listingu z DIR działa dobrze
- check if file exists before loading it with tcbm2sd fastload utility command

[20250620]
- @8..12 do ustawienia nr urządzenia

[20250619]
- dodane function key definition z prawidłowym wykrywaniem banku
- poprawione zwracanie statusu i błędu
- directory browser patchowany żeby nie wołał RESTOR, ale to nie działa
- początki DOS wedge (@,$)

[20250618]
- chyba poprawiony bug po load error - odwtorzenie rejestru stanu CPU
- directory browser from startup

[20250617]
- startup screen jak z Action Replay

[20250530]
- CPLD polutowane do końca - LOAD się zawiesza (screen on/off bez różnicy), co gorsza wczytuje błędne bajty
  (ale load address chyba dobrze (?))

[20250529]
- teraz shift_complete jako zatrzask, chyba będzie działać ale trzeba przetestować - polutować do końca

[20250529]
- CPLD też działa, rejestry i shift out (na oscyloskopie) (100ms na 8 bitów)
! ale shift_complete się nie zapala (bo zależy od ta_underflow które jest aktywne tylko 1 cykl)
! nie widzę jak shift_complete miałoby być skasowane pod odczycie jak flaga ICR
  (musi zachować wartość do odczytu rejestru) -> wrócić do CIA.v

[20250526]
! NA SCHEMACIE VIA trzeba zmienić footprint na JP4 (zegar GAL) - ma być 3-2 = Phi0
- nowy ROM VIA działa (co więcej: ładowanie przez VIA działa z włączonym i wyłączonym ekranem) - reliable więc nie ma się co dalej bawić z CIA
- nowy ROM CIA działa tylko z wyłączonym ekranem
? a jak CIA z C128 ? (bo zepsuty CIA ma zapalony bit 4)
- CPLD polutowane ale w rejestrach I/O widać tylko 0, a pod $FD91 powinno przechowywać bit 6 (kierunek)
- pozostałe 3 VIA też działały

[20250522]
- nowe płytki w końcu dotarły
- CIA (phi2) + GAL (phi0) na działającym CIA *nie ładuje* przy włączonym ekranie
? a jak CIA z C128 ? (bo zepsuty CIA ma zapalony bit 4)
- VIA (phi2) + GAL (phi0) widać rejestry w monitorze
? a jak nowy ROM CIA
? a jak nowy ROM VIA

[20250511]
- test CIA (Phi2) + GAL (Phi0) z podłączonym serialem, nie działa, ale to *może* być wina zepsutego
  CIA (ma ciągle zapalony bit 4) -> test na CIA wyjętym z C128

[20250507]
- wersje VIA i CPLD (VQ44) gotowe
- wersja CIA z CIA na Phi2 ale GAL na Phi0 i jumper do przełączania GAL z Phi0 na Phi2
- kod poniżej powinien działać na PB1=MUX ale przy prawidłowych parametrach (bo myślałem że będzie 886kHz):
    ICR1  = 35468;  // Podwojona wartość (17734 * 2) // uwaga: Gemini mówi że dokładne to 35469
    OCR1A = 17734;  // Podwojona wartość (8867 * 2)

[20250506]
- wersja z VIA

[20250504] ("działa" == da się zapisać coś do rejestrów CIA)
- force slow clock podczas dostępu do CIA (zgodnie z sugestią z forum), nadal nie działa
- tamta płytka nie działa, zlutuję drugą z minimalnymi poprawkami, może znowu będzie działać
  (wszystko zepsuło się gdy rozciąłem ścieżkę phi2 przy porcie i zastąpiłem przewodem)
- druga zlutowana działa w porządku, to bardzo subtelny efekt!

[20250503]
- żadna z tych opcji nie działa dobrze do zapisu, wszystkie działają dobrze do odczytu (było też phi0 zamiast phi2)
- wersja z tcbm2sd zadziałała raz(!) (MUX zamiast wyjścia RESET, RW zamiast wejścia nRESET)
	CIA = ( cia_range );
	CIA = ( cia_range & ( (RW & !MUX) # (!RW & PHI2 ) ) ); // w tcbm2sd jest Phi0
	CIA = ( cia_range & ( (RW & !MUX) # (!RW & PHI2 & !MUX ) ) );
	CIA = ( cia_range & ( (RW & !MUX) # (!RW ) ) );
	CIA = ( cia_range & ( (RW & !MUX) # PHI2 ) );
- po tych eksperymentach przestała działać (zapis!) też podstawowa wersja
- tcbm2sd:
	drivedataout: adres+<READ> + !pla[10] (odczyt z chipa) MUX==0
	drivedatain : adres+<WRITE>+negedge pla[6](zapis do rejestru) (zapis: opadające phi0)
- forum: https://plus4world.powweb.com/forum/45705#45744
	drivedataout: adres+<READ> + mux==0 lub adres+<READ>+opóźnione phi2
	drivedatain : adres+<WRITE>+ phi2==1
	+'read from exp.bus'(write register) -> BA==1
- to może jednak CPLD?
	- https://github.com/niklasekstrom/cia-verilog/blob/master/cia.v
	- https://github.com/mist-devel/c64/blob/master/rtl/mos6526.v
	- jeden z trybów SPI: https://sbc.rictor.org/65spi1.html (9572 - 44 pin)
	- jeden z trybów SPI: https://sbc.rictor.org/65spi2.html (ATF...)
	- obcięte do 4 rejestrów: $04, $0C, $0D, $0E spokojnie się mieści w XC95144XL-10TQ100C

[20250502]
- próby z innymi CIA - wszystkie fail, nieważne czy Phi2, Phi0 czy zegar CD5420
  zegar TOD nie działa -> prawdopodobnie chodzi o zapis do rejestrów
  frustrujące, przypadkowo jedyny dobry to pierwszy którego spróbowałem
- ten jeden który działa w dodatku działa też na Phi0, tak samo dobrze i to nie jest 6526A, drugi uszkodzony jest z tego samego roku i nie działa
- ROM ma błędy:
  - file not found raportowane jako device not found (gdy burst działa)
  - flaga od adresu ładowania jest odwrotnie (to ,8,1 ładuje w BASIC zamiast loadaddress z pliku)

[20250501]
- SP/CNT są open drain (trzeba czytać datasheet!) i potrzebują 3.3K pullup (tak jak w C128)
- loader działa, ale tylko gdy ekran jest wyłączony (nie lubi wolnego zegara czy zmian prędkości?)
	- skoro zawiesza się w losowych miejscach tzn. gubi potwierdzenie odbioru bajtu
          tzn. CIA rejestruje odczyt i kasuje status w $0D, ale CPU nadal widzi tam 0 zamiast 8
	- można sprawdzić ustawiając IRQ i testować flagę z IRQ zamiast rejestr bezpośrednio
	- no chyba, że CIA faktycznie nie rejestruje odczytu, ale w to wątpię
- TOD sprawdzony, rozwarty używa sprzętowego dzielnika (50.8Hz), zwarty software (49.6Hz)
- na zegarze z CD4520 nie działa dobrze, dostęp do rejestrów nie jest reliable
- na Phi2 działa z wyłączonym ekranem
- potwierdzona logika ROM C1/C2 - C1 dolna połówka, C2 górna - jak tcbm2sd

[20250430]
- logika GAL na /CIA była odwrócona
- ale żeby zrobić prawidłowo trzeba /CIA przenieść na pin 19, więc zamienić /CIA (22) z ROM_A15 (19)
- reset CD4520 połączony (jumper 3-2)
- timing z CD4520 działa tylko gdy kondensator jest rozłączony, a rezystor zastąpiony zworką
- ale Phi2 jako CIACLK działa zdecydowanie lepiej - nie ma losowych błędów odczytu - tak zostawiam
- ROM C1 działa
- ROM C2 chyba działa (bo to BASIC7, który wiesza się z jiffydos, sprawdzić kiedyś na innym)
- na ROM burst bez urządzenia LOAD wiesza się z komunikatem 'SEARCHING' - false positive?

[20250429]
- nie działało, bo sieć +5V nie była połączona z siecią VCC; po połączeniu działa zegar/licznik
- bez CIA pod FD90 widać to samo - losowe liczby
- z CIA komputer się nie uruchamia, czasem zdąży

Zmiany do v1.1 na schemacie i płytce
- sieć +5V połączona z VCC
- /CIA i ROM_A15 zamienione miejscami (19 <-> 22), teraz /CIA na 19
- jumper od CD4520 domyślnie połączony 3-2
- info, że R/C można nie montować
- jumper od zegara z Phi2 albo CD4520 (slow/fast vs slow)
- oznaczyć że GAL to 22V10
- SP i CNT potrzebują pullup 3.3K do VCC
- usunąć połączenie MUX z attiny?
- info o zworce: zwarta=software clock,rozwarta=hw clock

CPLD:
- $04 timer A low
- $0C serial port we/wy
- $0D status - bit 3 (wyszło/weszło)
- $0E kontrola: 2 bity: timer start, port in/out
https://raw.githubusercontent.com/niklasekstrom/cia-verilog/refs/heads/master/cia.v

https://plus4world.powweb.com/pubs/compute_mit/sa_1988-05/compute_mit_sa_1988_5.pdf (str 54)
- tu jest VIA podłączone do r/w, phi2, reset, irq, d0-7, a0-3 i tylko /CS skąd innąd

https://github.com/mist64/cbmsrc/tree/master/KERNAL_TED_05

https://github.com/mist64/cbmsrc/blob/master/BASIC_TED/keydefs.src
	chgkey - programowanie klawisza $B7A7
	doakey - $B7C2 ;enter with len in .a, addr in 'index', & key # (0-7) in 'keynum'=$76
	keyins = $b840
	indin1 (lda (index),y) -> $04b0 index = $22

LDA #0 ; 0-7 (0=F1, 7=F8)
STA $76 ; keynum
LDA #<keydef
STA $22 ; index
LDA #>keydef
STA $23 ; index+1
LDA #keydefend-keydef
JSR $B7C2 ; doakey -> or JSR $FF49

https://github.com/mist64/cbmsrc/blob/master/KERNAL_C128_06/load.src
	C128 burst load
	fast serial detect ($0a1c bit 6)

http://www.ffd2.com/fridge/chacking/c=hacking3.txt - fastload
http://www.ffd2.com/fridge/chacking/c=hacking4.txt - burst lib
http://www.ffd2.com/fridge/chacking/c=hacking19.txt - c64 fastload:

   Both the drive and the computer must detect whether the other side can
   handle fast serial transfers. This is accomplished by sending a byte
   using the synchronous serial port while doing handshaking. The drive
   sends a fast serial byte when the computer sends a secondary address
   (SECOND, which is called by e.g. CHKOUT), the computer can in practice
   send the fast serial byte anytime after the drive is reset and before
   the drive would send fast serial bytes.

tzn. gdybym wysylal komendę przez listen/second (jak w c=hacking 3/4) to powinno się wykryc burst
po second w rejestrze statusu CIA? (nawet nie muszę! ROM tego nie wyczyści, nie jak w C64/128)
Ojala: oldload gdy nazwa zaczyna się od ':', ale DLOAD zawsze dodaje '0:' do nazwy
otwiera kanał #15, po ustawieniu na output już powinno być wiadomo czy to fast, czy slow device


+4 read ram
.C:07d9  08          PHP
.C:07da  78          SEI
.C:07db  8D 3F FF    STA $FF3F
.C:07de  B1 00       LDA ($00),Y
.C:07e0  8D 3E FF    STA $FF3E
.C:07e3  28          PLP
.C:07e4  60          RTS
.C:07e5  18          CLC

trzeba robić toggle CLK out ($01 EOR #$02)
https://ist.uwaterloo.ca/~schepers/MJK/7501.html
P0	SERIAL DATA OUT.
P1	SERIAL CLK output
P2	SERIAL ATN output
P3	Cassette motor.
P4	Cassette read.
P5	Not externally accessible.
P6	SERIAL CLK input
P7	SERIAL DATA input. If jumper J8 is closed, also for Cassette SENSE.

C64:$ee85 - wszystkie ROMy mają clock hi najpierw, potem clocklo, datahi, datalo
TED:$e2b8
LE2B8   LDA   IO
        AND   #$FD
        STA   IO
        RTS    
clkhi
       lda port        	;set clock line high (inverted)
       and #%11111101
       sta port
       rts


https://plus4world.powweb.com/software/Hypaload_1551
- v4.7 do disasemblacji
- ale ta stara (zepsuta) też działa

ROM:
- display welcome message
- install F-key (tools) -> directory browser (tcbm2sd)
- install LOAD vector
	- if 'VERIFY' -> standard load
	- if '$' -> standard load
	- if 1571/81 (burst) -> burst (coś się pojawia na porcie serial przy otwarciu kanału)
	- if tcbm2sd -> ~burst command / fastload tcbm2sd
	- if 1541+parallel -> speeddos
	- if 1541 -> jakiś inny fastloader
	- if 1551 -> hypaload 4.7 (uwaga: nie działa na vice)
- burst detect - c128?
- 'DLOAD' adds '0:' always

TODO:
- decide on I/O address (16 bytes) for CIA, update GAL -> FD90..FD9F CIA, FDA0-AF VIA?

https://www.lemon64.com/forum/viewtopic.php?t=36751

16/+4
PAL: 886724 Hz
NTSC: 894886 Hz



const uint8_t PWM_pin  = 0; // PB0 (OC1A)
const uint8_t MODE_pin = 3; // PB3 – zworka do GND = tryb programowy

bool use_software_pwm;
const uint8_t half_duty_ms = 10;

void setup() {
  pinMode(PWM_pin, OUTPUT);
  pinMode(MODE_pin, INPUT_PULLUP);
  delay(100);

  use_software_pwm = (digitalRead(MODE_pin) == LOW);

  if (!use_software_pwm) {
    // Timer1: źródło zegara = MUX podany na T1 (PB1)
    // Preskaler = 1 (CS10=1), tryb Fast PWM z TOP=ICR1
    TCCR1 = 0;
    GTCCR = 0;
    TCCR1 |= (1 << PWM1A) | (1 << COM1A1);     // non-inverting PWM
    TCCR1 |= (1 << CS10);                      // clock source: ext pin T1, no prescaler
    ICR1  = 17734;
    OCR1A = 8867;
  }
}

void loop() {
  if (use_software_pwm) {
    digitalWrite(PWM_pin, HIGH);
    delay(half_duty_ms);
    digitalWrite(PWM_pin, LOW);
    delay(half_duty_ms);
  }
}











https://a1bert.kapsi.fi/Dev/burst/

Modification to c64
To use burst fastloader with C64 we need to connect the CIA synchronous serial port to the synchronous serial lines of the Commodore peripheral serial bus. Two wires are needed: one to connect the serial bus data line to the syncronous serial port data line and one to connect the serial bus SRQ (the obsolete line for service request, now fast serial clock) to the synchronous serial port clock line. Select the right connections depending on whether you want to use CIA1 or CIA2.

	1570/1,1581				C64

Pin1	SRQ	Fast serial bus clk		CNT1/2	User port 4/6
Pin5	DATA	Data - slow&fast bus		SP1/2	User port 5/7


Top view - old c64, CIA1
User port	Cass port	Serial connector

||||||||||||	||||||		 HHHHH		behind:
||||||||||||	||||||	       .-1 3 5-.
       ||______________________|  2 4  |	  / \
       |	CNT1		   6   |	 // \\
       |_______________________________|	 |||||
		SP1				1 264 5


Top view - old c64, CIA2
User port	Cass port	Serial connector

||||||||||||	||||||		 HHHHH		behind:
||||||||||||	||||||	       .-1 3 5-.
     ||________________________|  2 4  |	  / \
     |	CNT2			   6   |	 // \\
     |_________________________________|	 |||||
		SP2				1 264 5